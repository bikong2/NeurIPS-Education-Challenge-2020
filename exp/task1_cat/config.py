FOLD_NAME = 'mskf_user'
FOLD_NUM = 5
RANDOM_STATE = 46

TARGET_TASK = '1'

CAT_PARAMS = {
    'depth': 9,
    'learning_rate': 0.2,
    'bagging_temperature': 0.2,
    'od_type': 'Iter',
    'metric_period': 50,
    'iterations': 3000,
    'od_wait': 20,
    'random_seed': RANDOM_STATE,
}

if TARGET_TASK == '1':
    CAT_PARAMS['loss_function'] = 'Logloss'
    CAT_PARAMS['eval_metric'] = 'AUC'
if TARGET_TASK == '2':
    CAT_PARAMS['loss_function'] = 'MultiClass'
    CAT_PARAMS['eval_metric'] = 'Accuracy'

subject_id_list = [
    3,
    32,
    33,
    34,
    35,
    36,
    37,
    38,
    39,
    40,
    41,
    42,
    44,
    45,
    46,
    47,
    48,
    49,
    50,
    51,
    52,
    53,
    54,
    55,
    56,
    57,
    58,
    59,
    60,
    61,
    62,
    63,
    64,
    65,
    66,
    67,
    68,
    69,
    70,
    71,
    72,
    73,
    74,
    75,
    76,
    77,
    78,
    79,
    80,
    81,
    83,
    84,
    85,
    86,
    87,
    88,
    89,
    90,
    91,
    92,
    93,
    94,
    95,
    96,
    97,
    98,
    99,
    100,
    101,
    102,
    103,
    104,
    105,
    106,
    107,
    108,
    109,
    110,
    111,
    112,
    113,
    114,
    115,
    116,
    117,
    118,
    119,
    120,
    126,
    128,
    129,
    130,
    131,
    137,
    139,
    140,
    141,
    142,
    144,
    146,
    149,
    151,
    152,
    153,
    154,
    156,
    157,
    158,
    159,
    160,
    163,
    164,
    165,
    166,
    167,
    168,
    171,
    172,
    173,
    174,
    175,
    176,
    177,
    178,
    179,
    180,
    181,
    182,
    183,
    184,
    185,
    186,
    187,
    188,
    189,
    190,
    191,
    192,
    193,
    195,
    196,
    197,
    198,
    199,
    200,
    202,
    203,
    204,
    205,
    206,
    207,
    208,
    209,
    210,
    211,
    212,
    213,
    214,
    215,
    216,
    217,
    218,
    219,
    220,
    221,
    222,
    223,
    224,
    225,
    226,
    227,
    228,
    229,
    230,
    231,
    232,
    233,
    234,
    235,
    236,
    237,
    238,
    239,
    240,
    241,
    242,
    243,
    244,
    245,
    246,
    247,
    248,
    249,
    250,
    251,
    252,
    253,
    254,
    255,
    256,
    257,
    258,
    259,
    260,
    261,
    262,
    263,
    264,
    265,
    266,
    267,
    268,
    269,
    270,
    271,
    272,
    273,
    274,
    275,
    276,
    277,
    278,
    279,
    280,
    281,
    282,
    283,
    284,
    298,
    313,
    315,
    317,
    331,
    332,
    334,
    335,
    336,
    337,
    338,
    339,
    340,
    341,
    342,
    343,
    344,
    348,
    349,
    350,
    351,
    352,
    353,
    354,
    355,
    361,
    365,
    366,
    367,
    369,
    370,
    371,
    372,
    374,
    375,
    376,
    377,
    388,
    406,
    407,
    408,
    409,
    410,
    411,
    412,
    416,
    417,
    418,
    430,
    431,
    432,
    434,
    435,
    436,
    437,
    439,
    441,
    442,
    446,
    447,
    448,
    451,
    453,
    462,
    474,
    480,
    487,
    539,
    540,
    649,
    654,
    655,
    656,
    657,
    692,
    698,
    700,
    1059,
    1076,
    1077,
    1078,
    1079,
    1080,
    1081,
    1082,
    1156,
    1157,
    1158,
    1159,
    1160,
    1161,
    1162,
    1163,
    1164,
    1165,
    1166,
    1167,
    1168,
    1169,
    1170,
    1171,
    1172,
    1173,
    1174,
    1175,
    1176,
    1177,
    1178,
    1179,
    1180,
    1181,
    1182,
    1183,
    1184,
    1185,
    1186,
    1187,
    1188,
    1189,
    1200,
    1201,
    1202,
    1203,
    1204,
    1207,
    1208,
    1209,
    1210,
    1211,
    1212,
    1213,
    1214,
    1215,
    1216,
    1217,
    1218,
    1219,
    1263,
    1264,
    1265,
    1266,
    1636,
    1642,
    1647,
    1648,
    1649,
    1650,
    1651,
    1675,
    1676,
    1750,
    1975,
    1976,
    1977,
    1980,
    1982,
    1983,
    1985,
    1987,
    1988
]

level_cnum_list = [
    '0_8',
    '1_16',
    '3_0',
    '2_3',
    '2_4',
    '2_5',
    '2_10',
    '2_7',
    '1_14',
    '2_11',
    '2_6',
    '2_9',
    '2_8',
    '1_5',
    '1_12',
    '2_1',
    '2_13',
    '1_1',
    '1_4',
    '2_2',
    '2_14',
    '1_0',
    '2_0',
    '0_1'
]


subject_meta_cols = [
    'num',
    'max_level',
    'sum_level',
    'max_cnum',
    'sum_cnum',
]

subject_features = [f'subj_{f}' for f in subject_id_list]
level_cnum_features = [f'subj_{f}' for f in level_cnum_list]
subject_meta_features = [f'subj_{f}' for f in subject_meta_cols]

user_lag_num_features = [
    'DateAnswered_dt_diff',
    'DateAnswered_dt_diff_cumsum',
    'DateAnswered_dt_diff_shift',
    'DateAnswered_dt_diff_cumsum_shift',
    'answer_num',
    'answer_num_norm',
    'quiz_answer_num',
    'quiz_answer_num_norm',
    'quiz_unique_num',
    'subj_unique_num',
    'group_unique_num',
    'subjcat_unique_num',
]
user_lag_cat_features = [
    'answer_num_div5',
    'quiz_answer_num_div5',
    'change_subjcat',
    'answered_subjcat',
    'prev_question',
    'prev_subjcat',
]
user_lag_multicat_features = [
    'prev10_question',
    'prev10_subjcat',
]
user_lag_features = user_lag_num_features + user_lag_cat_features + user_lag_multicat_features

answer_date_features = [
    'DateAnswered_weekday',
    'DateAnswered_hour',
    'DateAnswered_day',
    'DateAnswered_wom'
]
count_encording_cat = [
    'QuestionId',
    'UserId',
    'Gender',
    'PremiumPupil',
    'Confidence',
    'GroupId',
    'QuizId',
    'SchemeOfWorkId',
    'age_years',
    'DateAnswered_weekday',
    'DateAnswered_hour',
    'DateAnswered_day',
    'DateAnswered_wom',
    'answer_num_div5',
    'quiz_answer_num_div5',
    'change_subjcat',
    'answered_subjcat',
    'prev_question',
    'prev_subjcat',
    'SubjectId_cat',
    'pri_to_high_stu',
    ['UserId', 'DateAnswered_weekday'],
    ['UserId', 'DateAnswered_hour'],
    ['UserId', 'DateAnswered_day'],
    ['UserId', 'DateAnswered_wom'],
    ['UserId', 'DateAnswered_weekday', 'DateAnswered_hour'],
    ['UserId', 'DateAnswered_weekday', 'DateAnswered_wom'],
    ['UserId', 'Confidence'],
    ['UserId', 'SchemeOfWorkId'],
    ['UserId', 'GroupId'],
    ['UserId', 'QuizId'],
    ['UserId', 'SubjectId_cat'],
    ['UserId', 'answer_num_div5'],
    ['UserId', 'quiz_answer_num_div5'],
    ['UserId', 'change_subjcat'],
    ['UserId', 'answered_subjcat'],
    ['UserId', 'age_years'],
    ['UserId', 'age_years', 'Confidence'],
    ['QuestionId', 'Confidence'],
    ['QuestionId', 'SchemeOfWorkId'],
    ['QuestionId', 'age_years'],
    ['QuestionId', 'Gender'],
    ['QuestionId', 'answer_num_div5'],
    ['QuestionId', 'quiz_answer_num_div5'],
    ['QuestionId', 'change_subjcat'],
    ['QuestionId', 'answered_subjcat'],
    ['QuestionId', 'PremiumPupil'],
    ['QuestionId', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'age_years', 'Gender'],
    ['QuestionId', 'age_years', 'PremiumPupil'],
    ['QuestionId', 'age_years', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'age_years', 'Gender'],
    ['QuestionId', 'Confidence', 'age_years', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'age_years', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'prev_question'],
    ['QuestionId', 'DateOfBirth_NaN'],
    ['QuestionId', 'pri_to_high_stu'],
    ['SubjectId_cat', 'Confidence'],
    ['SubjectId_cat', 'SchemeOfWorkId'],
    ['SubjectId_cat', 'age_years'],
    ['SubjectId_cat', 'Gender'],
    ['SubjectId_cat', 'answer_num_div5'],
    ['SubjectId_cat', 'quiz_answer_num_div5'],
    ['SubjectId_cat', 'change_subjcat'],
    ['SubjectId_cat', 'answered_subjcat'],
    ['QuestionId', 'GroupId'],
    ['QuestionId', 'QuizId'],
    ['SchemeOfWorkId', 'Confidence'],
    ['SchemeOfWorkId', 'GroupId'],
    ['SchemeOfWorkId', 'QuizId'],
    ['SchemeOfWorkId', 'age_years'],
    ['SchemeOfWorkId', 'Gender'],
    ['SchemeOfWorkId', 'answer_num_div5'],
    ['SchemeOfWorkId', 'quiz_answer_num_div5'],
    ['SchemeOfWorkId', 'change_subjcat'],
    ['SchemeOfWorkId', 'answered_subjcat'],
    ['SchemeOfWorkId', 'PremiumPupil'],
    ['SchemeOfWorkId', 'Gender', 'PremiumPupil'],
    ['SchemeOfWorkId', 'age_years', 'Gender'],
    ['SchemeOfWorkId', 'age_years', 'PremiumPupil'],
    ['SchemeOfWorkId', 'age_years', 'Gender', 'PremiumPupil'],
]
count_encording_features = []
for col in count_encording_cat:
    if not isinstance(col, list):
        col = [col]
    name = "_".join(col)
    count_encording_features.append(f'{name}_ce')

te_smooth_factor = 5
target_encording_cat = [
    'QuestionId',
    'UserId',
    'Gender',
    'PremiumPupil',
    'Confidence',
    'GroupId',
    'QuizId',
    'SchemeOfWorkId',
    'age_years',
    'DateAnswered_weekday',
    'DateAnswered_hour',
    'DateAnswered_day',
    'DateAnswered_wom',
    'answer_num_div5',
    'quiz_answer_num_div5',
    'change_subjcat',
    'answered_subjcat',
    'prev_question',
    'prev_subjcat',
    'SubjectId_cat',
    'DateOfBirth_NaN',
    'pri_to_high_stu',
    ['DateAnswered_day', 'DateAnswered_hour'],
    ['DateAnswered_weekday', 'DateAnswered_hour'],
    ['DateAnswered_weekday', 'DateAnswered_wom'],
    ['UserId', 'DateAnswered_weekday'],
    ['UserId', 'DateAnswered_hour'],
    ['UserId', 'DateAnswered_day'],
    ['UserId', 'DateAnswered_wom'],
    ['UserId', 'DateAnswered_weekday', 'DateAnswered_hour'],
    ['UserId', 'DateAnswered_weekday', 'DateAnswered_wom'],
    ['UserId', 'Confidence'],
    ['UserId', 'SchemeOfWorkId'],
    ['UserId', 'GroupId'],
    ['UserId', 'QuizId'],
    ['UserId', 'SubjectId_cat'],
    ['UserId', 'answer_num_div5'],
    ['UserId', 'quiz_answer_num_div5'],
    ['UserId', 'change_subjcat'],
    ['UserId', 'answered_subjcat'],
    ['UserId', 'age_years'],
    ['UserId', 'age_years', 'Confidence'],
    ['QuestionId', 'Confidence'],
    ['QuestionId', 'SchemeOfWorkId'],
    ['QuestionId', 'age_years'],
    ['QuestionId', 'Gender'],
    ['QuestionId', 'PremiumPupil'],
    ['QuestionId', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'age_years', 'Gender'],
    ['QuestionId', 'age_years', 'PremiumPupil'],
    ['QuestionId', 'age_years', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'age_years', 'Gender'],
    ['QuestionId', 'Confidence', 'age_years', 'PremiumPupil'],
    ['QuestionId', 'Confidence', 'age_years', 'Gender', 'PremiumPupil'],
    ['QuestionId', 'answer_num_div5'],
    ['QuestionId', 'quiz_answer_num_div5'],
    ['QuestionId', 'GroupId'],
    ['QuestionId', 'QuizId'],
    ['QuestionId', 'change_subjcat'],
    ['QuestionId', 'answered_subjcat'],
    ['QuestionId', 'prev_question'],
    ['QuestionId', 'DateOfBirth_NaN'],
    ['QuestionId', 'pri_to_high_stu'],
    ['SubjectId_cat', 'Confidence'],
    ['SubjectId_cat', 'SchemeOfWorkId'],
    ['SubjectId_cat', 'age_years'],
    ['SubjectId_cat', 'Gender'],
    ['SubjectId_cat', 'answer_num_div5'],
    ['SubjectId_cat', 'quiz_answer_num_div5'],
    ['SubjectId_cat', 'change_subjcat'],
    ['SubjectId_cat', 'answered_subjcat'],
    ['SchemeOfWorkId', 'Confidence'],
    ['SchemeOfWorkId', 'GroupId'],
    ['SchemeOfWorkId', 'QuizId'],
    ['SchemeOfWorkId', 'age_years'],
    ['SchemeOfWorkId', 'Gender'],
    ['SchemeOfWorkId', 'answer_num_div5'],
    ['SchemeOfWorkId', 'quiz_answer_num_div5'],
    ['SchemeOfWorkId', 'change_subjcat'],
    ['SchemeOfWorkId', 'answered_subjcat'],
    ['SchemeOfWorkId', 'PremiumPupil'],
    ['SchemeOfWorkId', 'Gender', 'PremiumPupil'],
    ['SchemeOfWorkId', 'age_years', 'Gender'],
    ['SchemeOfWorkId', 'age_years', 'PremiumPupil'],
    ['SchemeOfWorkId', 'age_years', 'Gender', 'PremiumPupil'],
]
target_encording_features = []
for tar in ['IsCorrect']:
    for col in target_encording_cat:
        if not isinstance(col, list):
            col = [col]
        name = "_".join(col)
        target_encording_features.append(f'TE_s{te_smooth_factor}_{name}_{tar}')

target_encording_ansval_features = []
for tar in ['AnswerValue_1', 'AnswerValue_2', 'AnswerValue_3', 'AnswerValue_4']:
    for col in target_encording_cat:
        if not isinstance(col, list):
            col = [col]
        name = "_".join(col)
        target_encording_ansval_features.append(f'TE_s{te_smooth_factor}_{name}_{tar}')

subj_conbi_cols = [
    'UserId',
    'age_years',
    'answered_subjcat',
    'SchemeOfWorkId',
    'Confidence',
]
target_encording_subj_conbi_cat = []
for col in subject_features:
    for col2 in subj_conbi_cols:
        target_encording_subj_conbi_cat.append([col, col2])

target_encording_subj_conbi_features = []
for tar in ['IsCorrect']:
    for col in target_encording_subj_conbi_cat:
        if not isinstance(col, list):
            col = [col]
        name = "_".join(col)
        target_encording_subj_conbi_features.append(f'TE_s{te_smooth_factor}_{name}_{tar}')

target_encording_subj_agg_features = []
for agg_func in ['sum', 'mean', 'std', 'max', 'min']:
    target_encording_subj_agg_features.append(f'TE_s{te_smooth_factor}_subj_agg_{agg_func}_IsCorrect')
for agg_func in ['sum', 'mean', 'std', 'max', 'min']:
    for conbi_col in subj_conbi_cols:
        target_encording_subj_agg_features.append(f'TE_s{te_smooth_factor}_subj_{conbi_col}_agg_{agg_func}_IsCorrect')

svd_n_components = 5
svd_features = []
svd_features += [f'ques_subj_svd_{i}' for i in range(svd_n_components)]
svd_features += [f'user_subj_svd_{i}' for i in range(svd_n_components)]

################################################################
dense_features = [
    'age_days'
]
dense_features += count_encording_features
dense_features += target_encording_features
dense_features += subject_meta_features
dense_features += target_encording_ansval_features
dense_features += user_lag_num_features
dense_features += target_encording_subj_agg_features
dense_features += svd_features

sparse_features = [
    # 'QuestionId',
    # 'UserId',
    'Gender',
    'PremiumPupil',
    'Confidence',
    # 'GroupId'
    # 'QuizId',
    'SchemeOfWorkId',
    'age_years',
    'SubjectId_cat',
    'DateOfBirth_NaN',
    'pri_to_high_stu',
]
sparse_features += answer_date_features
sparse_features += user_lag_cat_features

varlen_sparse_features = [
    # 'SubjectId',
    # 'SubjectId_level'
]
# varlen_sparse_features = varlen_sparse_features + user_lag_multicat_features
################################################################